# docker/Dockerfile.backend

FROM kyllerian/aigaq-base:v1.4

WORKDIR /app
ENV PYTHONUNBUFFERED 1
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES video,compute,utility

# Копируем и устанавливаем curl 7.68.0
COPY docker/curl7_68_install.sh /app/
RUN chmod +x /app/curl7_68_install.sh
RUN /app/curl7_68_install.sh

# Обновите кэш динамических библиотек
RUN ldconfig

# Копируем requirements
COPY eaigaq_project/requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt


# Копируем проект
COPY eaigaq_project/ /app/

# Создаем директорию под медиа
RUN mkdir -p /app/media && chmod -R 755 /app/media
ENV MEDIA_ROOT=/app/media

# Копируем SSL-сертификат (если нужно)
COPY ssl/server.crt /app/server.crt

# Копируем скрипт точки входа
COPY docker/entrypoint.sh /app/
RUN chmod +x /app/entrypoint.sh
RUN sed -i 's/\r$//' /app/entrypoint.sh

EXPOSE 8000
ENTRYPOINT ["/app/entrypoint.sh"]

# docker/Dockerfile.backend
#
# # Используем базовый образ с установленными CUDA, dlib и OpenCV
# FROM kyllerian/aigaq-base:v1.4
#
#
# # Устанавливаем рабочую директорию внутри контейнера
# WORKDIR /app
# ENV PYTHONUNBUFFERED 1
#
# ENV NVIDIA_VISIBLE_DEVICES all
# ENV NVIDIA_DRIVER_CAPABILITIES video,compute,utility
#
# # Исправление символических ссылок в /lib/x86_64-linux-gnu
# #RUN rm /lib/x86_64-linux-gnu/libcudadebugger.so.1 \
# #    #&& ln -s libcudadebugger.so.535.129.03 /lib/x86_64-linux-gnu/libcudadebugger.so.1 \
# #    && rm /lib/x86_64-linux-gnu/libcuda.so.1 \
# #    && ln -s libcuda.so.535.129.03 /lib/x86_64-linux-gnu/libcuda.so.1
#
# # Обновите кэш динамических библиотек
# RUN ldconfig
#
# # Копируем requirements.txt и устанавливаем зависимости Python
# COPY eaigaq_project/requirements.txt /app/
# RUN pip3 install --no-cache-dir -r requirements.txt
#
# # Копируем проект в рабочую директорию
# COPY eaigaq_project/ /app/
#
# # Создаём директорию для медиа-файлов и назначаем соответствующие права
# RUN mkdir -p /app/media && chmod -R 755 /app/media
#
# # Устанавливаем переменную окружения для пути к медиа-файлам
# ENV MEDIA_ROOT=/app/media
#
# # Копируем SSL-сертификат (если требуется)
# COPY ssl/server.crt /app/server.crt
#
# # Копируем скрипт точки входа
# COPY docker/entrypoint.sh /app/
#
# # Делаем скрипт исполняемым
# RUN chmod +x /app/entrypoint.sh
# RUN sed -i 's/\r$//' /app/entrypoint.sh
# # Открываем порт для приложения
# EXPOSE 8000
#
# # Устанавливаем точку входа
# ENTRYPOINT ["/app/entrypoint.sh"]