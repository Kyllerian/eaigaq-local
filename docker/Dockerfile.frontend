# docker/Dockerfile.frontend
# Этап 1: Сборка React-приложения
FROM node:18-alpine AS build

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем package.json и package-lock.json
COPY frontend/package.json frontend/package-lock.json ./

# Устанавливаем зависимости
RUN npm install

# Копируем файл .env (с обновленным REACT_APP_BACKEND_URL)
COPY frontend/.env ./

# Копируем исходный код приложения
COPY frontend/ ./

# Устанавливаем переменные окружения для сборки
ENV NODE_OPTIONS=--openssl-legacy-provider
ENV GENERATE_SOURCEMAP=false

# Собираем приложение
RUN npm run build

# Этап 2: Используем Nginx для обслуживания приложения
FROM nginx:alpine

# Создаем директорию для SSL-сертификатов
RUN mkdir -p /etc/nginx/ssl

# Копируем SSL-сертификаты в образ
COPY ssl/server.crt /etc/nginx/ssl/server.crt
COPY ssl/server.key /etc/nginx/ssl/server.key

# Отладка: проверяем, что сертификаты скопированы в образ
RUN echo "Содержимое /etc/nginx/ssl/:" && ls -l /etc/nginx/ssl/

# Копируем наш конфиг Nginx
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Копируем сборку React-приложения в директорию Nginx
COPY --from=build /app/build /usr/share/nginx/html

# Создаём директорию для медиа-файлов в Nginx
RUN mkdir -p /media && chmod -R 755 /media

# Открываем порт
EXPOSE 80
EXPOSE 443

# Команда запуска Nginx
CMD ["nginx", "-g", "daemon off;"]